#pragma once

#include "allocator"

namespace jang {


class stream_base;
template <class charT, class traits = char_traits<charT>> class basic_stream;

template <class charT, class traits = char_traits<charT>> class basic_stream_buffer;
template <class charT, class traits = char_traits<charT>> class basic_input_stream;
template <class charT, class traits = char_traits<charT>> class basic_output_stream;
template <class charT, class traits = char_traits<charT>> class basic_input_and_output_stream;

template <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT>> class basic_string_buffer;
template <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT>> class basic_input_string_stream;
template <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT>> class basic_output_stringstream;
template <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT>> class basic_string_stream;

template <class charT, class traits = char_traits<charT>> class basic_file_buffer;
template <class charT, class traits = char_traits<charT>> class basic_input_file_stream;
template <class charT, class traits = char_traits<charT>> class basic_output_file_stream;
template <class charT, class traits = char_traits<charT>> class basic_file_stream;

template <class charT, class traits = char_traits<charT>> class input_stream_buffer_iterator;
template <class charT, class traits = char_traits<charT>> class output_stream_buffer_iterator;

typedef basic_stream<char>              stream;
typedef basic_stream<wchar_t>           wios;

typedef basic_stream_buffer<char>    stream_buffer;
typedef basic_input_stream<char>          input_stream;
typedef basic_output_stream<char>          output_stream;
typedef basic_iostream<char>         iostream;

typedef basic_string_buffer<char>        stringbuf;
typedef basic_istringstream<char>    istringstream;
typedef basic_ostringstream<char>    ostringstream;
typedef basic_stringstream<char>     stringstream;

typedef basic_file_buffer<char>          file_buffer;
typedef basic_input_file_stream<char>         input_file_stream;
typedef basic_output_file_stream<char>         output_file_stream;
typedef basic_file_stream<char>          file_stream;

typedef basic_streambuf<wchar_t>     wstreambuf;
typedef basic_istream<wchar_t>       wistream;
typedef basic_ostream<wchar_t>       wostream;
typedef basic_iostream<wchar_t>      wiostream;

typedef basic_stringbuf<wchar_t>     wstringbuf;
typedef basic_istringstream<wchar_t> wistringstream;
typedef basic_ostringstream<wchar_t> wostringstream;
typedef basic_stringstream<wchar_t>  wstringstream;

typedef basic_filebuf<wchar_t>       wfilebuf;
typedef basic_ifstream<wchar_t>      wifstream;
typedef basic_ofstream<wchar_t>      wofstream;
typedef basic_fstream<wchar_t>       wfstream;

template <class state> class fpos;
typedef fpos<char_traits<char>::state_type>    streampos;
typedef fpos<char_traits<wchar_t>::state_type> wstreampos;

}

#pragma once

#include "type_traits"

namespace jang {

class generic_type_cast {
public:
	typedef generic_type_cast self_type;

protected:
private:
public:

	generic_type_cast() = delete;
	generic_type_cast(const self_type&) = delete;
	generic_type_cast(self_type&&) = delete;
	~generic_type_cast() = delete;

	self_type& operator=(const self_type&) = delete;

	template <typename T>
	operator T() const { return get(); }

	template <typename T, typename = enable_if_type<!is_pointer<T>::value>>
	T get() const { return _get(static_cast<T*>(nullptr)); }

	template <typename T, typename = enable_if_type<is_pointer<T>::value>>
	T get() noexcept { return get_ptr(); }

	template <typename T, typename = enable_if_type<is_pointer<T>::value>>
	T get_ptr() noexcept { return _get_ptr(); }

protected:

	template <typename T>
	virtual T _get(T*) = 0;

	template <typename T>
	virtual T _get_ptr() = 0;

private:
};

}

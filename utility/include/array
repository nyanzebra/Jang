#pragma once

#include "container"

namespace jang {

template <typename T, size_type N>
using array = fixed_length_container<T, N>;

//template <typename T, size_type N>
//class array : public fixed_length_container<T, N> {
//public:
//protected:
//private:
//public:
//	array() = default;
//	array(const array&) = default;
//	array(array&&) = default;
//	template <typename ForwardIterator>
//	array(ForwardIterator first, ForwardIterator last) : fixed_length_container<T, N>(first, last) {}
//	array(initializer_list<T> init) : fixed_length_container<T, N>(init.begin(), init.end()) {}
//	~array() = default;
//
//	
//protected:
//private:
//};

}


#pragma once

namespace jang {

template <typename T>
struct remove_const { typedef T type; };

template <typename T>
struct remove_const<const T> { typedef T type; };

template <typename T>
using remove_const_type = typename remove_const<T>::type;

template <typename T>
struct remove_volatile { typedef T type; };

template <typename T>
struct remove_volatile<volatile T> { typedef T type; };

template <typename T>
using remove_volatile_type = typename remove_volatile<T>::type;

template <typename T>
struct remove_const_volatile { typedef remove_const_type<remove_volatile_type<T>> type; };

template <typename T>
using remove_const_volatile_type = typename remove_const_volatile<T>::type;

template <typename T>
struct add_const { typedef const T type; };

template <typename T>
using add_const_type = typename add_const<T>::type;

template <typename T>
struct add_volatile { typedef volatile T type; };

template <typename T>
using add_volatile_type = typename add_volatile<T>::type;

template <typename T>
struct add_const_volatile { typedef add_const_type<add_volatile_type<T>> type; };
	
template <typename T>
using add_const_volatile_type = typename add_const_volatile<T>::type;

}

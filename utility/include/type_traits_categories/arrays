#pragma once 

#include "../types"

namespace jang {

template <typename T>
struct remove_extent { typedef T type; };

template <typename T>
struct remove_extent<T[]> { typedef T type; };

template <typename T, size_type N>
struct remove_extent<T[N]> { typedef T type; };

template <typename T>
using remove_extent_type = typename remove_extent<T>::type;

template <typename T>
struct remove_all_extents { typedef T type; };

template <typename T>
struct remove_all_extents<T[]> { typedef typename remove_all_extents<T>::type type; };

template <typename T, size_type N>
struct remove_all_extents<T[N]> { typedef typename remove_all_extents<T>::type type; };

template <typename T>
using remove_all_extents_type = typename remove_all_extents<T>::type;

}

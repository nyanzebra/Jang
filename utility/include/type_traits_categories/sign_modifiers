#pragma once 

namespace jang {
	
template <typename T>
struct make_unsigned {};

template <>
struct make_unsigned<char> { typedef unsigned char type; };

template <>
struct make_unsigned<short> { typedef unsigned short type; };

template <>
struct make_unsigned<int> { typedef unsigned int type; };

template <>
struct make_unsigned<long> { typedef unsigned long type; };

template <>
struct make_unsigned<long long> { typedef unsigned long long type; };

template <typename T>
using make_unsigned_type = typename make_unsigned<T>::type;

template <typename T>
struct make_signed {};

template <>
struct make_signed<unsigned char> { typedef char type; };

template <>
struct make_signed<unsigned short> { typedef short type; };

template <>
struct make_signed<unsigned int> { typedef int type; };

template <>
struct make_signed<unsigned long> { typedef long type; };

template <>
struct make_signed<unsigned long long> { typedef long long type; };

template <typename T>
using make_unsigned_type = typename make_unsigned<T>::type;

}

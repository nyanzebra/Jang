#pragma once

namespace jang {

template <typename T, T v>
struct integral_constant {
	typedef T value_type;
	typedef const T const_value_type;

	typedef T& reference_type;
	typedef const T& const_reference_type;

	typedef T&& universal_type;

	typedef T* pointer_type;
	typedef const T* const_pointer_type;
	typedef T* const pointer_const_type;
	typedef const T* const const_pointer_const_type;

	static constexpr value_type value = v;

	typedef integral_constant type;
	constexpr operator value_type() const noexcept { return value; }
	constexpr value_type operator()() const noexcept { return value; }
};

template <bool B>
using bool_constant = integral_constant<bool, B>;

using true_type = bool_constant<true>;

using false_type = bool_constant<false>;

}

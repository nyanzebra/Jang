#pragma once

#include "types"
#include "type_traits"

#include "mathematics/operations"

namespace jang {

template<size_type N>
constexpr bool is_valid_precision() { return (N - 1) < N; }

template <typename T>
double power(T value, int n) {
	switch (n) {
	case 0:
		return 1;
	case 1:
		return value;
	case -1:
		return 1 / value;
	default:
		return value * power(value, (n < 0 ? n + 1 : n - 1));
	}
}

template <typename T>
double round(T value) {

}

template <typename T, size_type N>
struct precision {
	static_assert(is_valid_precision<N>(), "Significant figures must be larger than zero!");

	precision(T val) : val(val) {}
	precision(const precision&) = default;
	precision(precision&&) = default;
	~precision() = default;

	T val;
	T to_precise() { auto Q = power(10, N - 1); return round(val * Q) / Q; }
};

}


#pragma once

#include "maths"

namespace jang {

template <typename T, typename = enable_if_type<is_arithmetic<T>::value>>
class numeric_limits {
public:
	typedef numeric_limits<T> self_type;
	typedef T underlying_type;

protected:

private:


public:

	numeric_limits() = delete;
	numeric_limits(const self_type&) = delete;
	numeric_limits(self_type&&) = delete;
	~numeric_limits() = default;


	constexpr static const T min() noexcept { return minimum<T>(); }

	constexpr static const T max() noexcept { return maximum<T>(); }

protected:

private:

};

}

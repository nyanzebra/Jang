// -*- C++ -*-
//===---------------------------- chrono ----------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_CHRONO
#define _LIBCPP_CHRONO

/*
    chrono synopsis

namespace std
{
namespace chrono
{

template <class ToDuration, class Rep, class Period>
constexpr
ToDuration
duration_cast(const duration<Rep, Period>& fd);

template <class Rep> struct treat_as_floating_point : is_floating_point<Rep> {};

template <class Rep>
struct duration_values
{
public:
    static constexpr Rep zero();
    static constexpr Rep max();
    static constexpr Rep min();
};

// duration

template <class Rep, class Period = ratio<1>>
class duration
{
    static_assert(!__is_duration<Rep>::value, "A duration representation can not be a duration");
    static_assert(__is_ratio<Period>::value, "Second template parameter of duration must be a std::ratio");
    static_assert(Period::num > 0, "duration period must be positive");
public:
    typedef Rep rep;
    typedef Period period;

    constexpr duration() = default;
    template <class Rep2>
        constexpr explicit duration(const Rep2& r,
            typename enable_if
            <
               is_convertible<Rep2, rep>::value &&
               (treat_as_floating_point<rep>::value ||
               !treat_as_floating_point<rep>::value && !treat_as_floating_point<Rep2>::value)
            >::type* = 0);

    // conversions
    template <class Rep2, class Period2>
        constexpr duration(const duration<Rep2, Period2>& d,
            typename enable_if
            <
                treat_as_floating_point<rep>::value ||
                ratio_divide<Period2, period>::type::den == 1
            >::type* = 0);

    // observer

    constexpr rep count() const;

    // arithmetic

    constexpr duration  operator+() const;
    constexpr duration  operator-() const;
    duration& operator++();
    duration  operator++(int);
    duration& operator--();
    duration  operator--(int);

    duration& operator+=(const duration& d);
    duration& operator-=(const duration& d);

    duration& operator*=(const rep& rhs);
    duration& operator/=(const rep& rhs);

    // special values

    static constexpr duration zero();
    static constexpr duration min();
    static constexpr duration max();
};

typedef duration<long long,         nano> nanoseconds;
typedef duration<long long,        micro> microseconds;
typedef duration<long long,        milli> milliseconds;
typedef duration<long long              > seconds;
typedef duration<     long, ratio<  60> > minutes;
typedef duration<     long, ratio<3600> > hours;

template <class Clock, class Duration = typename Clock::duration>
class time_point
{
public:
    typedef Clock                     clock;
    typedef Duration                  duration;
    typedef typename duration::rep    rep;
    typedef typename duration::period period;
private:
    duration d_;  // exposition only

public:
    time_point();  // has value "epoch" // constexpr in C++14
    explicit time_point(const duration& d);  // same as time_point() + d // constexpr in C++14

    // conversions
    template <class Duration2>
       time_point(const time_point<clock, Duration2>& t); // constexpr in C++14

    // observer

    duration time_since_epoch() const; // constexpr in C++14

    // arithmetic

    time_point& operator+=(const duration& d);
    time_point& operator-=(const duration& d);

    // special values

    static constexpr time_point min();
    static constexpr time_point max();
};

} // chrono

// common_type traits
template <class Rep1, class Period1, class Rep2, class Period2>
  struct common_type<chrono::duration<Rep1, Period1>, chrono::duration<Rep2, Period2>>;

template <class Clock, class Duration1, class Duration2>
  struct common_type<chrono::time_point<Clock, Duration1>, chrono::time_point<Clock, Duration2>>;

namespace chrono {

// duration arithmetic
template <class Rep1, class Period1, class Rep2, class Period2>
  constexpr
  typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2>>::type
  operator+(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
template <class Rep1, class Period1, class Rep2, class Period2>
  constexpr
  typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2>>::type
  operator-(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
template <class Rep1, class Period, class Rep2>
  constexpr
  duration<typename common_type<Rep1, Rep2>::type, Period>
  operator*(const duration<Rep1, Period>& d, const Rep2& s);
template <class Rep1, class Period, class Rep2>
  constexpr
  duration<typename common_type<Rep1, Rep2>::type, Period>
  operator*(const Rep1& s, const duration<Rep2, Period>& d);
template <class Rep1, class Period, class Rep2>
  constexpr
  duration<typename common_type<Rep1, Rep2>::type, Period>
  operator/(const duration<Rep1, Period>& d, const Rep2& s);
template <class Rep1, class Period1, class Rep2, class Period2>
  constexpr
  typename common_type<Rep1, Rep2>::type
  operator/(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);

// duration comparisons
template <class Rep1, class Period1, class Rep2, class Period2>
   constexpr
   bool operator==(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
template <class Rep1, class Period1, class Rep2, class Period2>
   constexpr
   bool operator!=(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
template <class Rep1, class Period1, class Rep2, class Period2>
   constexpr
   bool operator< (const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
template <class Rep1, class Period1, class Rep2, class Period2>
   constexpr
   bool operator<=(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
template <class Rep1, class Period1, class Rep2, class Period2>
   constexpr
   bool operator> (const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
template <class Rep1, class Period1, class Rep2, class Period2>
   constexpr
   bool operator>=(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);

// duration_cast
template <class ToDuration, class Rep, class Period>
  ToDuration duration_cast(const duration<Rep, Period>& d);

// time_point arithmetic (all constexpr in C++14)
template <class Clock, class Duration1, class Rep2, class Period2>
  time_point<Clock, typename common_type<Duration1, duration<Rep2, Period2>>::type>
  operator+(const time_point<Clock, Duration1>& lhs, const duration<Rep2, Period2>& rhs);
template <class Rep1, class Period1, class Clock, class Duration2>
  time_point<Clock, typename common_type<duration<Rep1, Period1>, Duration2>::type>
  operator+(const duration<Rep1, Period1>& lhs, const time_point<Clock, Duration2>& rhs);
template <class Clock, class Duration1, class Rep2, class Period2>
  time_point<Clock, typename common_type<Duration1, duration<Rep2, Period2>>::type>
  operator-(const time_point<Clock, Duration1>& lhs, const duration<Rep2, Period2>& rhs);
template <class Clock, class Duration1, class Duration2>
  typename common_type<Duration1, Duration2>::type
  operator-(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);

// time_point comparisons (all constexpr in C++14)
template <class Clock, class Duration1, class Duration2>
   bool operator==(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);
template <class Clock, class Duration1, class Duration2>
   bool operator!=(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);
template <class Clock, class Duration1, class Duration2>
   bool operator< (const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);
template <class Clock, class Duration1, class Duration2>
   bool operator<=(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);
template <class Clock, class Duration1, class Duration2>
   bool operator> (const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);
template <class Clock, class Duration1, class Duration2>
   bool operator>=(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);

// time_point_cast (constexpr in C++14)

template <class ToDuration, class Clock, class Duration>
  time_point<Clock, ToDuration> time_point_cast(const time_point<Clock, Duration>& t);

// Clocks

class system_clock
{
public:
    typedef microseconds                     duration;
    typedef duration::rep                    rep;
    typedef duration::period                 period;
    typedef chrono::time_point<system_clock> time_point;
    static const bool is_steady =            false; // constexpr in C++14

    static time_point now() noexcept;
    static time_t     to_time_t  (const time_point& __t) noexcept;
    static time_point from_time_t(time_t __t) noexcept;
};

class steady_clock
{
public:
    typedef nanoseconds                                   duration;
    typedef duration::rep                                 rep;
    typedef duration::period                              period;
    typedef chrono::time_point<steady_clock, duration>    time_point;
    static const bool is_steady =                         true; // constexpr in C++14

    static time_point now() noexcept;
};

typedef steady_clock high_resolution_clock;

}  // chrono

constexpr chrono::hours                                 operator "" h(unsigned long long); // C++14
constexpr chrono::duration<unspecified , ratio<3600,1>> operator "" h(long double); // C++14
constexpr chrono::minutes                               operator "" min(unsigned long long); // C++14
constexpr chrono::duration<unspecified , ratio<60,1>>   operator "" min(long double); // C++14
constexpr chrono::seconds                               operator "" s(unsigned long long); // C++14
constexpr chrono::duration<unspecified >                operator "" s(long double); // C++14
constexpr chrono::milliseconds                          operator "" ms(unsigned long long); // C++14
constexpr chrono::duration<unspecified , milli>         operator "" ms(long double); // C++14
constexpr chrono::microseconds                          operator "" us(unsigned long long); // C++14
constexpr chrono::duration<unspecified , micro>         operator "" us(long double); // C++14
constexpr chrono::nanoseconds                           operator "" ns(unsigned long long); // C++14
constexpr chrono::duration<unspecified , nano>          operator "" ns(long double); // C++14

}  // std
*/

#include <ctime>
#include "type_traits"
#include "ratio"
#include "limits"

namespace jang {

namespace chrono {

template <typename Repetitions, typename Period = ratio<1> > class duration;

template <class _Tp>
struct __is_duration : false_type {};

template <typename Repetitions, typename Period>
struct __is_duration<duration<Repetitions, Period> > : true_type  {};

template <typename Repetitions, typename Period>
struct __is_duration<const duration<Repetitions, Period> > : true_type  {};

template <typename Repetitions, typename Period>
struct __is_duration<volatile duration<Repetitions, Period> > : true_type  {};

template <typename Repetitions, typename Period>
struct __is_duration<const volatile duration<Repetitions, Period> > : true_type  {};

} // chrono

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
struct common_type<chrono::duration<Repetitions1, Period1>,
                                         chrono::duration<Repetitions2, Period2> >
{
    typedef chrono::duration<typename common_type<Repetitions1, Repetitions2>::type,
                             typename __ratio_gcd<Period1, Period2>::type> type;
};

namespace chrono {

// duration_cast

template <class _FromDuration, class _ToDuration,
          typename Period = typename ratio_divide<typename _FromDuration::period, typename _ToDuration::period>::type,
          bool = Period::num == 1,
          bool = Period::den == 1>
struct __duration_cast;

template <class _FromDuration, class _ToDuration, typename Period>
struct __duration_cast<_FromDuration, _ToDuration, Period, true, true>
{
    
    _ToDuration operator()(const _FromDuration& from_duration) const
    {
        return _ToDuration(static_cast<typename _ToDuration::rep>(from_duration.count()));
    }
};

template <class _FromDuration, class _ToDuration, typename Period>
struct __duration_cast<_FromDuration, _ToDuration, Period, true, false>
{
    
    _ToDuration operator()(const _FromDuration& from_duration) const
    {
        typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;
        return _ToDuration(static_cast<typename _ToDuration::rep>(
                           static_cast<_Ct>(from_duration.count()) / static_cast<_Ct>(Period::den)));
    }
};

template <class _FromDuration, class _ToDuration, typename Period>
struct __duration_cast<_FromDuration, _ToDuration, Period, false, true>
{
    
    _ToDuration operator()(const _FromDuration& from_duration) const
    {
        typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;
        return _ToDuration(static_cast<typename _ToDuration::rep>(
                           static_cast<_Ct>(from_duration.count()) * static_cast<_Ct>(Period::num)));
    }
};

template <class _FromDuration, class _ToDuration, typename Period>
struct __duration_cast<_FromDuration, _ToDuration, Period, false, false>
{
    
    _ToDuration operator()(const _FromDuration& from_duration) const
    {
        typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;
        return _ToDuration(static_cast<typename _ToDuration::rep>(
                           static_cast<_Ct>(from_duration.count()) * static_cast<_Ct>(Period::num)
                                                          / static_cast<_Ct>(Period::den)));
    }
};

template <class _ToDuration, typename Repetitions, typename Period>
inline 
typename enable_if
<
    __is_duration<_ToDuration>::value,
    _ToDuration
>::type
duration_cast(const duration<Repetitions, Period>& from_duration)
{
    return __duration_cast<duration<Repetitions, Period>, _ToDuration>()(from_duration);
}

template <typename Repetitions>
struct treat_as_floating_point : is_floating_point<Repetitions> {};

template <typename Repetitions>
struct duration_values
{
     static Repetitions zero() {return Repetitions(0);}
     static Repetitions max()  {return numeric_limits<Repetitions>::max();}
     static Repetitions min()  {return numeric_limits<Repetitions>::lowest();}
};

// duration

template <typename Repetitions, typename Period>
class duration
{
    static_assert(!__is_duration<Repetitions>::value, "A duration representation can not be a duration");
    static_assert(__is_ratio<Period>::value, "Second template parameter of duration must be a std::ratio");
    static_assert(Period::num > 0, "duration period must be positive");

    template <class _R1, class _R2>
    struct __no_overflow
    {
    private:
        static const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num, _R2::num>::value;
        static const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den, _R2::den>::value;
        static const intmax_t __n1 = _R1::num / __gcd_n1_n2;
        static const intmax_t __d1 = _R1::den / __gcd_d1_d2;
        static const intmax_t __n2 = _R2::num / __gcd_n1_n2;
        static const intmax_t __d2 = _R2::den / __gcd_d1_d2;
        static const intmax_t max = -((intmax_t(1) << (sizeof(intmax_t) * CHAR_BIT - 1)) + 1);

        template <intmax_t X, intmax_t Y, bool WillOverflow>
        struct minutesul    // WillOverflow == false
        {
            static const intmax_t value = X * Y;
        };

        template <intmax_t X, intmax_t Y>
        struct minutesul<X, Y, true>
        {
            static const intmax_t value = 1;
        };

    public:
        static const bool value = (__n1 <= max / __d2) && (__n2 <= max / __d1);
        typedef ratio<minutesul<__n1, __d2, !value>::value,
                      minutesul<__n2, __d1, !value>::value> type;
    };
    
public:
    typedef Repetitions rep;
    typedef Period period;
private:
    rep __rep_;
public:

    
#ifndef _LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS
        duration() = default;
#else
        duration() {}
#endif

    template <typename Repetitions2>
        
        explicit duration(const Repetitions2& __r,
            typename enable_if
            <
               is_convertible<Repetitions2, rep>::value &&
               (treat_as_floating_point<rep>::value ||
               !treat_as_floating_point<Repetitions2>::value)
            >::type* = 0)
                : __rep_(__r) {}

    // conversions
    template <typename Repetitions2, typename Period2>
        
        duration(const duration<Repetitions2, Period2>& __d,
            typename enable_if
            <
                __no_overflow<Period2, period>::value && (
                treat_as_floating_point<rep>::value ||
                (__no_overflow<Period2, period>::type::den == 1 &&
                 !treat_as_floating_point<Repetitions2>::value))
            >::type* = 0)
                : __rep_(_VSTD::chrono::duration_cast<duration>(__d).count()) {}

    // observer

     rep count() const {return __rep_;}

    // arithmetic

     duration  operator+() const {return *this;}
     duration  operator-() const {return duration(-__rep_);}
     duration& operator++()      {++__rep_; return *this;}
     duration  operator++(int)   {return duration(__rep_++);}
     duration& operator--()      {--__rep_; return *this;}
     duration  operator--(int)   {return duration(__rep_--);}

     duration& operator+=(const duration& __d) {__rep_ += __d.count(); return *this;}
     duration& operator-=(const duration& __d) {__rep_ -= __d.count(); return *this;}

     duration& operator*=(const rep& rhs) {__rep_ *= rhs; return *this;}
     duration& operator/=(const rep& rhs) {__rep_ /= rhs; return *this;}
     duration& operator%=(const rep& rhs) {__rep_ %= rhs; return *this;}
     duration& operator%=(const duration& rhs) {__rep_ %= rhs.count(); return *this;}

    // special values

     static duration zero() {return duration(duration_values<rep>::zero());}
     static duration min()  {return duration(duration_values<rep>::min());}
     static duration max()  {return duration(duration_values<rep>::max());}
};

typedef duration<long long,         nano> nanoseconds;
typedef duration<long long,        micro> microseconds;
typedef duration<long long,        milli> milliseconds;
typedef duration<long long              > seconds;
typedef duration<     long, ratio<  60> > minutes;
typedef duration<     long, ratio<3600> > hours;

// Duration ==

template <class _LhsDuration, class _RhsDuration>
struct __duration_eq
{
    
    bool operator()(const _LhsDuration& __lhs, const _RhsDuration& __rhs) const
        {
            typedef typename common_type<_LhsDuration, _RhsDuration>::type _Ct;
            return _Ct(__lhs).count() == _Ct(__rhs).count();
        }
};

template <class _LhsDuration>
struct __duration_eq<_LhsDuration, _LhsDuration>
{
    
    bool operator()(const _LhsDuration& __lhs, const _LhsDuration& __rhs) const
        {return __lhs.count() == __rhs.count();}
};

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
inline 
bool
operator==(const duration<Repetitions1, Period1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    return __duration_eq<duration<Repetitions1, Period1>, duration<Repetitions2, Period2> >()(__lhs, __rhs);
}

// Duration !=

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
inline 
bool
operator!=(const duration<Repetitions1, Period1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    return !(__lhs == __rhs);
}

// Duration <

template <class _LhsDuration, class _RhsDuration>
struct __duration_lt
{
    
    bool operator()(const _LhsDuration& __lhs, const _RhsDuration& __rhs) const
        {
            typedef typename common_type<_LhsDuration, _RhsDuration>::type _Ct;
            return _Ct(__lhs).count() < _Ct(__rhs).count();
        }
};

template <class _LhsDuration>
struct __duration_lt<_LhsDuration, _LhsDuration>
{
    
    bool operator()(const _LhsDuration& __lhs, const _LhsDuration& __rhs) const
        {return __lhs.count() < __rhs.count();}
};

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
inline 
bool
operator< (const duration<Repetitions1, Period1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    return __duration_lt<duration<Repetitions1, Period1>, duration<Repetitions2, Period2> >()(__lhs, __rhs);
}

// Duration >

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
inline 
bool
operator> (const duration<Repetitions1, Period1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    return __rhs < __lhs;
}

// Duration <=

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
inline 
bool
operator<=(const duration<Repetitions1, Period1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    return !(__rhs < __lhs);
}

// Duration >=

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
inline 
bool
operator>=(const duration<Repetitions1, Period1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    return !(__lhs < __rhs);
}

// Duration +

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
inline 
typename common_type<duration<Repetitions1, Period1>, duration<Repetitions2, Period2> >::type
operator+(const duration<Repetitions1, Period1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    typedef typename common_type<duration<Repetitions1, Period1>, duration<Repetitions2, Period2> >::type _Cd;
    return _Cd(_Cd(__lhs).count() + _Cd(__rhs).count());
}

// Duration -

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
inline 
typename common_type<duration<Repetitions1, Period1>, duration<Repetitions2, Period2> >::type
operator-(const duration<Repetitions1, Period1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    typedef typename common_type<duration<Repetitions1, Period1>, duration<Repetitions2, Period2> >::type _Cd;
    return _Cd(_Cd(__lhs).count() - _Cd(__rhs).count());
}

// Duration *

template <typename Repetitions1, typename Period, typename Repetitions2>
inline 
typename enable_if
<
    is_convertible<Repetitions2, typename common_type<Repetitions1, Repetitions2>::type>::value,
    duration<typename common_type<Repetitions1, Repetitions2>::type, Period>
>::type
operator*(const duration<Repetitions1, Period>& __d, const Repetitions2& __s)
{
    typedef typename common_type<Repetitions1, Repetitions2>::type _Cr;
    typedef duration<_Cr, Period> _Cd;
    return _Cd(_Cd(__d).count() * static_cast<_Cr>(__s));
}

template <typename Repetitions1, typename Period, typename Repetitions2>
inline 
typename enable_if
<
    is_convertible<Repetitions1, typename common_type<Repetitions1, Repetitions2>::type>::value,
    duration<typename common_type<Repetitions1, Repetitions2>::type, Period>
>::type
operator*(const Repetitions1& __s, const duration<Repetitions2, Period>& __d)
{
    return __d * __s;
}

// Duration /

template <class _Duration, typename Repetitions, bool = __is_duration<Repetitions>::value>
struct __duration_divide_result
{
};

template <class _Duration, typename Repetitions2,
    bool = is_convertible<Repetitions2,
                          typename common_type<typename _Duration::rep, Repetitions2>::type>::value>
struct __duration_divide_imp
{
};

template <typename Repetitions1, typename Period, typename Repetitions2>
struct __duration_divide_imp<duration<Repetitions1, Period>, Repetitions2, true>
{
    typedef duration<typename common_type<Repetitions1, Repetitions2>::type, Period> type;
};

template <typename Repetitions1, typename Period, typename Repetitions2>
struct __duration_divide_result<duration<Repetitions1, Period>, Repetitions2, false>
    : __duration_divide_imp<duration<Repetitions1, Period>, Repetitions2>
{
};

template <typename Repetitions1, typename Period, typename Repetitions2>
inline 
typename __duration_divide_result<duration<Repetitions1, Period>, Repetitions2>::type
operator/(const duration<Repetitions1, Period>& __d, const Repetitions2& __s)
{
    typedef typename common_type<Repetitions1, Repetitions2>::type _Cr;
    typedef duration<_Cr, Period> _Cd;
    return _Cd(_Cd(__d).count() / static_cast<_Cr>(__s));
}

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
inline 
typename common_type<Repetitions1, Repetitions2>::type
operator/(const duration<Repetitions1, Period1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    typedef typename common_type<duration<Repetitions1, Period1>, duration<Repetitions2, Period2> >::type _Ct;
    return _Ct(__lhs).count() / _Ct(__rhs).count();
}

// Duration %

template <typename Repetitions1, typename Period, typename Repetitions2>
inline 
typename __duration_divide_result<duration<Repetitions1, Period>, Repetitions2>::type
operator%(const duration<Repetitions1, Period>& __d, const Repetitions2& __s)
{
    typedef typename common_type<Repetitions1, Repetitions2>::type _Cr;
    typedef duration<_Cr, Period> _Cd;
    return _Cd(_Cd(__d).count() % static_cast<_Cr>(__s));
}

template <typename Repetitions1, typename Period1, typename Repetitions2, typename Period2>
inline 
typename common_type<duration<Repetitions1, Period1>, duration<Repetitions2, Period2> >::type
operator%(const duration<Repetitions1, Period1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    typedef typename common_type<Repetitions1, Repetitions2>::type _Cr;
    typedef typename common_type<duration<Repetitions1, Period1>, duration<Repetitions2, Period2> >::type _Cd;
    return _Cd(static_cast<_Cr>(_Cd(__lhs).count()) % static_cast<_Cr>(_Cd(__rhs).count()));
}

//////////////////////////////////////////////////////////
///////////////////// time_point /////////////////////////
//////////////////////////////////////////////////////////

template <class _Clock, class _Duration = typename _Clock::duration>
class time_point
{
    static_assert(__is_duration<_Duration>::value,
                  "Second template parameter of time_point must be a std::chrono::duration");
public:
    typedef _Clock                    clock;
    typedef _Duration                 duration;
    typedef typename duration::rep    rep;
    typedef typename duration::period period;
private:
    duration __d_;

public:
    _AFTER_CXX11 time_point() : __d_(duration::zero()) {}
    _AFTER_CXX11 explicit time_point(const duration& __d) : __d_(__d) {}

    // conversions
    template <class _Duration2>
    _AFTER_CXX11
    time_point(const time_point<clock, _Duration2>& t,
        typename enable_if
        <
            is_convertible<_Duration2, duration>::value
        >::type* = 0)
            : __d_(t.time_since_epoch()) {}

    // observer

    _AFTER_CXX11 duration time_since_epoch() const {return __d_;}

    // arithmetic

     time_point& operator+=(const duration& __d) {__d_ += __d; return *this;}
     time_point& operator-=(const duration& __d) {__d_ -= __d; return *this;}

    // special values

     static time_point min() {return time_point(duration::min());}
     static time_point max() {return time_point(duration::max());}
};

} // chrono

template <class _Clock, class _Duration1, class _Duration2>
struct common_type<chrono::time_point<_Clock, _Duration1>,
                                         chrono::time_point<_Clock, _Duration2> >
{
    typedef chrono::time_point<_Clock, typename common_type<_Duration1, _Duration2>::type> type;
};

namespace chrono {

template <class _ToDuration, class _Clock, class _Duration>
inline _AFTER_CXX11
time_point<_Clock, _ToDuration>
time_point_cast(const time_point<_Clock, _Duration>& __t)
{
    return time_point<_Clock, _ToDuration>(_VSTD::chrono::duration_cast<_ToDuration>(__t.time_since_epoch()));
}

// time_point ==

template <class _Clock, class _Duration1, class _Duration2>
inline _AFTER_CXX11
bool
operator==(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)
{
    return __lhs.time_since_epoch() == __rhs.time_since_epoch();
}

// time_point !=

template <class _Clock, class _Duration1, class _Duration2>
inline _AFTER_CXX11
bool
operator!=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)
{
    return !(__lhs == __rhs);
}

// time_point <

template <class _Clock, class _Duration1, class _Duration2>
inline _AFTER_CXX11
bool
operator<(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)
{
    return __lhs.time_since_epoch() < __rhs.time_since_epoch();
}

// time_point >

template <class _Clock, class _Duration1, class _Duration2>
inline _AFTER_CXX11
bool
operator>(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)
{
    return __rhs < __lhs;
}

// time_point <=

template <class _Clock, class _Duration1, class _Duration2>
inline _AFTER_CXX11
bool
operator<=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)
{
    return !(__rhs < __lhs);
}

// time_point >=

template <class _Clock, class _Duration1, class _Duration2>
inline _AFTER_CXX11
bool
operator>=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)
{
    return !(__lhs < __rhs);
}

// time_point operator+(time_point x, duration y);

template <class _Clock, class _Duration1, typename Repetitions2, typename Period2>
inline _AFTER_CXX11
time_point<_Clock, typename common_type<_Duration1, duration<Repetitions2, Period2> >::type>
operator+(const time_point<_Clock, _Duration1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    typedef time_point<_Clock, typename common_type<_Duration1, duration<Repetitions2, Period2> >::type> _Tr;
    return _Tr (__lhs.time_since_epoch() + __rhs);
}

// time_point operator+(duration x, time_point y);

template <typename Repetitions1, typename Period1, class _Clock, class _Duration2>
inline _AFTER_CXX11
time_point<_Clock, typename common_type<duration<Repetitions1, Period1>, _Duration2>::type>
operator+(const duration<Repetitions1, Period1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)
{
    return __rhs + __lhs;
}

// time_point operator-(time_point x, duration y);

template <class _Clock, class _Duration1, typename Repetitions2, typename Period2>
inline _AFTER_CXX11
time_point<_Clock, typename common_type<_Duration1, duration<Repetitions2, Period2> >::type>
operator-(const time_point<_Clock, _Duration1>& __lhs, const duration<Repetitions2, Period2>& __rhs)
{
    return __lhs + (-__rhs);
}

// duration operator-(time_point x, time_point y);

template <class _Clock, class _Duration1, class _Duration2>
inline _AFTER_CXX11
typename common_type<_Duration1, _Duration2>::type
operator-(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)
{
    return __lhs.time_since_epoch() - __rhs.time_since_epoch();
}

//////////////////////////////////////////////////////////
/////////////////////// clocks ///////////////////////////
//////////////////////////////////////////////////////////

class _LIBCPP_TYPE_VIS system_clock
{
public:
    typedef microseconds                     duration;
    typedef duration::rep                    rep;
    typedef duration::period                 period;
    typedef chrono::time_point<system_clock> time_point;
    static_AFTER_CXX11 const bool is_steady = false;

    static time_point now() _NOEXCEPT;
    static time_t     to_time_t  (const time_point& __t) _NOEXCEPT;
    static time_point from_time_t(time_t __t) _NOEXCEPT;
};

#ifndef _LIBCPP_HAS_NO_MONOTONIC_CLOCK
class _LIBCPP_TYPE_VIS steady_clock
{
public:
    typedef nanoseconds                                   duration;
    typedef duration::rep                                 rep;
    typedef duration::period                              period;
    typedef chrono::time_point<steady_clock, duration>    time_point;
    static_AFTER_CXX11 const bool is_steady = true;

    static time_point now() _NOEXCEPT;
};

typedef steady_clock high_resolution_clock;
#else
typedef system_clock high_resolution_clock;
#endif

} // chrono

#if _LIBCPP_STD_VER > 11
// Suffixes for duration literals [time.duration.literals]
inline namespace literals
{ 
  inline namespace chrono_literals
  {

    constexpr chrono::hours operator"" h(unsigned long long hours)
    {
        return chrono::hours(static_cast<chrono::hours::rep>(hours));
    }

    constexpr chrono::duration<long double, ratio<3600,1>> operator"" h(long double hours)
    {
        return chrono::duration<long double, ratio<3600,1>>(hours);
    }


    constexpr chrono::minutes operator"" min(unsigned long long minutes)
    {
        return chrono::minutes(static_cast<chrono::minutes::rep>(minutes));
    }

    constexpr chrono::duration<long double, ratio<60,1>> operator"" min(long double minutes)
    {
        return chrono::duration<long double, ratio<60,1>> (minutes);
    }


    constexpr chrono::seconds operator"" s(unsigned long long __s)
    {
        return chrono::seconds(static_cast<chrono::seconds::rep>(__s));
    }

    constexpr chrono::duration<long double> operator"" s(long double __s)
    {
        return chrono::duration<long double> (__s);
    }


    constexpr chrono::milliseconds operator"" ms(unsigned long long minutess)
    {
        return chrono::milliseconds(static_cast<chrono::milliseconds::rep>(minutess));
    }

    constexpr chrono::duration<long double, milli> operator"" ms(long double minutess)
    {
        return chrono::duration<long double, milli>(minutess);
    }


    constexpr chrono::microseconds operator"" us(unsigned long long __us)
    {
        return chrono::microseconds(static_cast<chrono::microseconds::rep>(__us));
    }

    constexpr chrono::duration<long double, micro> operator"" us(long double __us)
    {
        return chrono::duration<long double, micro> (__us);
    }
    

    constexpr chrono::nanoseconds operator"" ns(unsigned long long __ns)
    {
        return chrono::nanoseconds(static_cast<chrono::nanoseconds::rep>(__ns));
    }

    constexpr chrono::duration<long double, nano> operator"" ns(long double __ns)
    {
        return chrono::duration<long double, nano> (__ns);
    }

}}

namespace chrono { // hoist the literals into namespace std::chrono
   using namespace literals::chrono_literals;
}

}
